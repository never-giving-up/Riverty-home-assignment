// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestfulBookerTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RestfulBookerFeature : object, Xunit.IClassFixture<RestfulBookerFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Restful booker", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RestfulBooker.feature"
#line hidden
        
        public RestfulBookerFeature(RestfulBookerFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Can create a booking using all encoding methods")]
        [Xunit.TraitAttribute("FeatureTitle", "Restful booker")]
        [Xunit.TraitAttribute("Description", "Can create a booking using all encoding methods")]
        [Xunit.InlineDataAttribute("json", new string[0])]
        [Xunit.InlineDataAttribute("xml", new string[0])]
        [Xunit.InlineDataAttribute("urlEncoded", new string[0])]
        public async System.Threading.Tasks.Task CanCreateABookingUsingAllEncodingMethods(string method, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("method", method);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Can create a booking using all encoding methods", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
    await testRunner.GivenAsync(string.Format("we create a booking using the encoding method {0}", method), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
    await testRunner.ThenAsync("the booking from the result is identical to the one we created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 6
    await testRunner.AndAsync("we can retrieve the booking from the server", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Can create a booking with different prices")]
        [Xunit.TraitAttribute("FeatureTitle", "Restful booker")]
        [Xunit.TraitAttribute("Description", "Can create a booking with different prices")]
        [Xunit.InlineDataAttribute("0", new string[0])]
        [Xunit.InlineDataAttribute("10.5", new string[0])]
        [Xunit.InlineDataAttribute("100.0001", new string[0])]
        [Xunit.InlineDataAttribute("100", new string[0])]
        [Xunit.InlineDataAttribute("100000", new string[0])]
        [Xunit.InlineDataAttribute("2147483646.9", new string[0])]
        [Xunit.InlineDataAttribute("2147483647", new string[0])]
        public async System.Threading.Tasks.Task CanCreateABookingWithDifferentPrices(string price, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("price", price);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Can create a booking with different prices", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
    await testRunner.GivenAsync(string.Format("we create a booking with the price {0}", price), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
    await testRunner.ThenAsync("the booking from the result is identical to the one we created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 17
    await testRunner.AndAsync("we can retrieve the booking from the server", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Cannot create a booking with a negative price")]
        [Xunit.TraitAttribute("FeatureTitle", "Restful booker")]
        [Xunit.TraitAttribute("Description", "Cannot create a booking with a negative price")]
        [Xunit.InlineDataAttribute("-1", new string[0])]
        [Xunit.InlineDataAttribute("-3.75", new string[0])]
        [Xunit.InlineDataAttribute("-50.32334", new string[0])]
        [Xunit.InlineDataAttribute("-300", new string[0])]
        [Xunit.InlineDataAttribute("-2147483648", new string[0])]
        public async System.Threading.Tasks.Task CannotCreateABookingWithANegativePrice(string price, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("price", price);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Cannot create a booking with a negative price", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
    await testRunner.GivenAsync(string.Format("we create a booking with the price {0}", price), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
    await testRunner.ThenAsync("the booking should not succeed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Can create a booking without the accept header")]
        [Xunit.TraitAttribute("FeatureTitle", "Restful booker")]
        [Xunit.TraitAttribute("Description", "Can create a booking without the accept header")]
        [Xunit.InlineDataAttribute("json", new string[0])]
        [Xunit.InlineDataAttribute("xml", new string[0])]
        [Xunit.InlineDataAttribute("urlEncoded", new string[0])]
        public async System.Threading.Tasks.Task CanCreateABookingWithoutTheAcceptHeader(string method, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("method", method);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Can create a booking without the accept header", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 42
    await testRunner.GivenAsync(string.Format("we create a booking without adding the accept header and using the encoding metho" +
                            "d {0}", method), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 43
    await testRunner.ThenAsync("the booking from the result is identical to the one we created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="We can get bookings by name")]
        [Xunit.TraitAttribute("FeatureTitle", "Restful booker")]
        [Xunit.TraitAttribute("Description", "We can get bookings by name")]
        [Xunit.InlineDataAttribute("sally", "onally", new string[0])]
        [Xunit.InlineDataAttribute("Jon", "Øberg", new string[0])]
        [Xunit.InlineDataAttribute("", "", new string[0])]
        [Xunit.InlineDataAttribute("1234åøæ", "!!\n", new string[0])]
        public async System.Threading.Tasks.Task WeCanGetBookingsByName(string first, string last, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("first", first);
            argumentsOfScenario.Add("last", last);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("We can get bookings by name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
    await testRunner.GivenAsync(string.Format("we create a booking using the first name {0} and the last name {1}", first, last), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.ThenAsync("we can retrieve the booking from the server using the name filtering", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await RestfulBookerFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await RestfulBookerFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
